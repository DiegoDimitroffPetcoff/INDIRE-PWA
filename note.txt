AddPD2.jsx (deprequeted - non confirmed)
Selecciona un archivo PDF lo convierte en un BLOB
y lo envia
- ya saque la logica.. falta eliminarlo y probar si todo sigue funcionando

FetchAddProjectTest.jsx(deprequeted - non confirmed)
Se envia a Microsoft Graph data en binario
   como aplicacion /PDF

TAREAS:
REORDENAR CODIGO
Leer que es BLOB
Buscar como almacenar el archivo PDF localmente para casos offline
Mirar el archivos BlobConversor y practicar retornos de promesas
Hacer visual de usuario no logeado (hecho pero desordenado) Tambien desabilitar ruta segun este o no logeado
MIRAR LOS ERRORES(POR EJEMPLO CUANDO SE SUBE UN ARCHIVO SIN ESTAR LOGEADO) 
Crear ventanas emergentes para los casos en los que se suban de manera exitosa los archivos
RESOLVER: DEPENDIENDO DE LAS MEDIDAS SE VA A GUARDAR EL PDF

Dependencias eliminadas:
* html2canvas
* jspdf
* @testing-library/user-event
* workbox-background-sync
* workbox-broadcast-update
* workbox-cacheable-response
* workbox-google-analytics
* workbox-navigation-preload
* workbox-range-requests
* workbox-streams


DEPENDENCIAS AGREGADAS
Missing dependencies
* eslint-config-react-app: .\package.json
PS C:\Users\diego\proyectos-practica\INDIRE-pws\FRONTEND>
 

COMANDOS PARA VERIFICAR DEPENDENCIAS NO UTILIZADAS
depcheck
npx depcheck
npx npm depcheck


COMANDOS PARA AUMENTAR LA MEMORIA PREDETERMINADA DE NODE JS
NODE_OPTIONS="--max-old-space-size=4096" react-scripts start   (no funciono)


*PAGES
 **AddProject.jsx
  es el que va a crear el PDF
*UTILS
 **blobConversor.jsx
  Se encarga de convertir un archivo PDF en formato BLOB
 **fetchPostMicrosoftGraph.jsx
  Se encarga de Subir un archivo PDF a Microsoft siempre que el usuario este logeado correctamente
 **auth.jsx
  Se encarga de enviar el Token de seguridad si el usuario esta logueado
  
