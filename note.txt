

COLORES:
amarillo: #e7b504
negro: #050404
marron oscuro: #663c0c
marron: #8e5404
verde: #746c04


TAREAS:
1- Hacer los templates
2- Agregar alert cuando se sube un PDF
Buscar como almacenar el archivo PDF localmente para casos offline
Hacer visual de usuario no logeado (hecho pero desordenado) Tambien desabilitar ruta segun este o no logeado
MIRAR LOS ERRORES(POR EJEMPLO CUANDO SE SUBE UN ARCHIVO SIN ESTAR LOGEADO) 
Crear ventanas emergentes para los casos en los que se suban de manera exitosa los archivos
TERMINAR RELATORIO VISUAL PDF
AGREGAR SETTINGS -> editar carpeta donde se va a guardar todo y NOMBRE DEL ARCHIVO
Agregar espacio para subir directamente un PDF
AGREGAR NUMERO DE RELATORIO

automatizar componente de Text
agregar el color que muestra cuando un input esta completado)
Validacion cuando no haya un data.body (es enviado desde addProject a PDFview)



Dependencias eliminadas:
* html2canvas
* jspdf
* @testing-library/user-event
* workbox-background-sync
* workbox-broadcast-update
* workbox-cacheable-response
* workbox-google-analytics
* workbox-navigation-preload
* workbox-range-requests
* workbox-streams


DEPENDENCIAS AGREGADAS
Missing dependencies
* eslint-config-react-app: .\package.json
PS C:\Users\diego\proyectos-practica\INDIRE-pws\FRONTEND>
 


COMANDOS PARA VERIFICAR DEPENDENCIAS NO UTILIZADAS
depcheck
npx depcheck
npx npm depcheck


COMANDOS PARA AUMENTAR LA MEMORIA PREDETERMINADA DE NODE JS
NODE_OPTIONS="--max-old-space-size=4096" react-scripts start   (no funciono)


*PAGES
 **AddProject.jsx
  es el que va a crear el PDF
*UTILS
 **blobConversor.jsx
  Se encarga de convertir un archivo PDF en formato BLOB
 **fetchPostMicrosoftGraph.jsx
  Se encarga de Subir un archivo PDF a Microsoft siempre que el usuario este logeado correctamente
 **auth.jsx
  Se encarga de enviar el Token de seguridad si el usuario esta logueado
  
